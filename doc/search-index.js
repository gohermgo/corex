var searchIndex = new Map(JSON.parse('[\
["corex",{"doc":"The Rust Core Extension Library","t":"CCCKMKKKKKKRRMM","n":["cmp","marker","ops","AlmostEq","aeq","Numeric","NumericRef","Signed","Unsigned","BitOnes","BitZero","Output","Output","bitones","bitzero"],"q":[[0,"corex"],[3,"corex::cmp"],[5,"corex::marker"],[9,"corex::ops"],[15,"core::marker"]],"d":["Utilities for comparing and ordering values","Primitive traits and types representing basic properties …","Overloadable operators i guess","Trait for approximate comparison using the =~ some day.","This method tests for <code>self</code> and <code>other</code> values to be …","Marker trait for numbers","Marker trait for references to numbers","Marker trait for signed <code>Numeric</code> and <code>NumericRef</code> types","Marker trait for unsigned <code>Numeric</code> and <code>NumericRef</code> types","The type-agnostic ‘one’-ing operator","The type-agnostic zeroing operator","The resulting type after applying the <code>self ^ self</code> operator","The resulting type after applying the <code>self ^ self</code> operator","Performs the <code>self ^ self</code> operation","Performs the <code>self ^ self</code> operation"],"i":[0,0,0,0,1,0,0,0,0,0,0,6,5,5,6],"f":[0,0,0,0,[[1,-1,-1],2,3],0,0,0,0,0,0,0,0,[[[5,[],[[4,[-1]]]]],-1,[]],[[[6,[],[[4,[-1]]]]],-1,[]]],"c":[],"p":[[10,"AlmostEq",3],[1,"bool"],[10,"Sized",15],[17,"Output"],[10,"BitOnes",9],[10,"BitZero",9]],"b":[],"a":{"&№":[6],"(i/f)x":[7],".-":[10],"=~":[3],"o~":[9],"ux":[8],"№":[5]}}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
